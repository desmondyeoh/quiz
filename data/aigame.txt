Explain two main reasons why use AI to play games in both player and non-player role. Give example games for each reason (10)

1. Playing to win
 Achieve as high a performance as possible
 Getting high score, winning over opponent, surviving a long time or similar
 Not always possible to define high performance, example The Sims, minecraft
 Example: Board games AI (TD-Gammon, Chinook, Deep Blue, AlphaGo), Jeopardy
(Watson), Starcraft (AlphaStar), Dota2 (OpenAI)
2. Playing for experience
 Not all player playing to win
 Act as adversary, provides assistance, emotively expressive, tells a story
 Agent play in human-like manner, entertaining or behave predictably
 Simulation-based testing or Game demonstration
 Example: Game Turing Test (2kBot Prize/Mario), Persona Modeling


What are the reasons to use AI that plays in the player role to win? (4)

1. Most common in academic setting, where AI assume the role of player to win in order to test capabilities and performance of AI algorithms. – Resulting AI program beating best human player, example Deep Blue in chess, DeepMind’s Alpha Go in Go, IBM Watson in Jeopardy
2. Games are made to test human intelligence, exercise cognitive abilities, offer gradual skill progression that test AI at different capability levels
3. Need strong AI to provide challenge to players such as classic board games
4. Test games whether game or level is playable, called simulation-based testing


Non-player characters (NPC) are often designed not to offer maximum challenge but instead to be entertaining or human like. However, there are cases where we want NPC to play as well as possible. What are the example games of such cases? (3)

 Example: Civilization needs high performing non-cheating opponents.
 Example: strategy games such as EXCOM: Enemy Unknown
 Example: Racing game, use Rubber band AI to control NPC cars to adapt their speed to
human player so they are never too far behind of ahead. The performance of the controller can be reduced when necessary to match player’s performance


Why would we like to design human-like agent that plays a game in the player role but does not focus on winning?

1. Simulation-based testing (5)
 Used to automatically evaluate game content generated either manually or
automatically by letting the human-like agent plays it.
 Important agent plays like human-like manner, comparable performance to
human, similar reaction speed, makes mistakes like human, curious and explores
the same areas as human, etc.
2. Demonstrate how to play a level to a human player
 Demo mode which shows game in action, example Super Mario Bros
 If player repeatedly fail to play a level, the game takes control and plays for you
for 10 to 20 seconds and lets you continue afterwards.
 If some parts of game are procedurally generated, the game needs to generate
these demonstration itself


What are the obvious signs of non-humanness that recur across games for many types of AI agents? (5)

 Extremely fast reactions
 Switching between actions faster than a human could
 Not attempting actions which fail
 Not doing unnecessary actions
 Not hesitating or stopping to think


What are the desirable features game designer look for when designing non-player characters (NPC) that play for experience in the non-player role? (3+3)

 Illusion of intelligence
     Player believe that NPC is intelligent even though the code controlling it is very
simple
 Predictability
     Player memorize and predict regularities of guards
     Petrols are regular and can be gleaned by the player
     Boss monsters repeat certain movement in sequence
 Not too “intelligent” or adaptive
     Is boring and unsportsmanlike
     Example: neuroevolution provides a solution that was extremely boring, keep
    defensive and use long range attack on incoming units
     “camping” – staying stationary in protected position and waiting for player to
    expose them, effective in military tactic but not fun
     In FIFA 99, best way to score goal is forcing a penalty kick


What are the five characteristics of games? (5)

 Number of players
 Stochasticity
 Observability
 Action space and branching factor
 Time granularity


For a single player game with predictable environment, what algorithm is suitable to play the game? (2)

 Single agent-tree search algorithms based on Markov property (next state is entirely determined by previous state and action taken at the point)


For a two-player zero-sum adversarial like chess where one player win and another lose, what algorithm is suitable to play the game? (1)

 Minimax algorithm (with or without α-β pruning)


Why tree-search and reinforcement learning might not be suitable for game with high
stochasticity like ms pacman or Starcraft? (6)

 Tree search,
     Cannot be sure the states that sequence of actions will lead to which might affect
    the result.
     Increase base computational complexity
 Reinforcement learning
     Reduced certainty of how good/bad a policy is
     Need to evaluate policy multiple times which increase computational cost


How can AI play a game with hidden information (partial observability) such as card games and strategy games? (3)

 Simplest approach is to ignore the hidden information, just feed agent with available action and decide action. For example Super Mario Bros
 For strategy games like Starcraft, involves active information gathering
 Model the hidden information including opponents’ play


What are the characteristics of AI algorithm design that you must consider? (4)

 How is the game state represented?
 Is there a forward model?
 Do you have time to train?
 How many games are you playing?


How can game state represented to an algorithm playing a racing car game? (3)

 First-person view out of the windscreen car rendered in 3D
 An overhead view of the track rendering the track and various cars in 2D
 A list of positions and velocities of all cars on the track in the frame of reference of the track


Why using unprocessed visual feed – i.e., tens of thousands of pixel values as input representation is not recommended? (4)

 Finding a decent policy is much harder
 Policy search space vastly greater
 Proportion of search space that corresponds to decently-performing policies is likely
much smaller as many more nonsensical policies are possible
 Requires a learned visual system of some kind to drive well


What motivates researchers to use full visual feeds (i.e., full pixels input) as input representation? (3)

 Giving the AI same conditions as a human would have
 Algorithm to play game “out of the box” without any API or additional engineering to
expose internal state of the game
 To develop game-independent algorithms


A very important factor when designing an AI to play game is the availability of a simulator of the game called the forward model. Briefly explain the forward model and how to construct it? (8)

 A model which given a state s and an action a, reaches the same state s’ as the real game would reach if it was given a at s.
 Game simulation – multiple actions can be explored before taking it in real game
 Necessary to use tree search-based approaches
 Must be fast – a thousand or hundreds of thousands times faster than real time
 Easy to construct for classic board games such as Chess and Go as game state is simply
the board state and rules are very easy to encode
 For other games, copy the same code that controls the game but without waiting for user
input and displaying graphics and calculations involved in graphic rendering.
 For classic 8-bit or 16-bit arcade games, run them inside emulators that can replace
graphics routines with dummy code
 Impossible to extract for other games as source code not available, or core control loops
closely tied up with user interface management, rendering, animation and network code.


List down several planning-based approaches that can be used to play games. (4)

 Classic tree search
 Stochastic tree search
 Evolutionary planning
 Planning with symbolic representation


What are the characteristics and requirements of a game that allow us to use classic tree search methods for planning a move? (3)

 Full observability
 Low branching factor
 Fast forward model


What is the most common use of A* algorithm in games? (3)

 Navigation / Path-planning / path finding in physical space


Why Monte Carlo Tree Search (MCTS) is a better search than adversarial search in Go game? (4)

 Go has a high branching factor (much higher than chess)
 Hard to algorithmically judge the value of a board state
 MCTS build an imbalanced trees where not all moves need to be explored to the same
depth which reduces effective branching factor
 MCTS also do random rollouts until the end of the game which reduces the need of state
evaluation


How can we use evolutionary planning to play games? In which situation that evolutionary planning performs well? (4)

 Instead of searching for sequence of actions starting from an initial point, we can optimize the whole action sequence.
 Search the space of complete action sequences for those that have maximum utility
 Evaluating the utility by taking all the actions in the sequence in simulation and observe
the value of the state reached after taking those actions
 Handles well very large branching factors as in games with multiple independent units
such as in Hero Academy turn-based strategy game.


Discuss the limitations of reinforcement learning algorithm that learns to play a game. (9)

 Lack of good function approximators for value function (e.g., the Q function)
 Q function requires all state value or {state, action} values that are stored separately, for example in a table.
 For most game too many many states (billions) to be stored and most of these state are never visited
 Too big to store in memory
 Use temporal difference – learn value using neighboring states, reduces state storage
 Use a compressed representation of value function i.e., function approximator such as neural network
 Neural network and temporal difference have “catastrophic forgetting” learn degenerate
strategies and unlearn sophisticated strategies
 Sparse reward
 When same reward is encountered for a long time, BP algorithm will only output that value for any state (similar to training long term on a single training example)


Discuss the use of evolutionary reinforcement learning to play games. (8)

 Use evolutionary algorithms to evolve weights and/or topology of neural networks (neuroevolution) or programs structured as expression trees (genetic programming)
 Fitness evaluation by using neural network to play game and using result as fitness function
 John Koza used evolving programs to play pacman in 1992
 Around 2005, car racing, first-person shooters, strategy games, real-time strategy games
and classic arcade games such as Pacman
 Extremely versatile, can be applied to wide range of games in several different ways for
each game.
 Egocentric inputs are generally strongly preferred
 Works best when states can be represented using few dimensions (fewer than 50 unit of
neural network input layer)
 Suffers from curse of dimensionality


How can we use supervised learning to play games? (3)

 Record traces of human players playing a game and train some function approximator to behave like the human player
 Traces are store as list of tuples <features, target> where features represent the game state and target is the action of the human in that state
 Instead of predict action, can also predict states value, then use function approximator with search algorithm to play the game


Why are game contents? (5)

 Game content is that which is contained in a game:
     Levels
     Maps
     Game rules
     Textures
     Stories


What game content is most commonly procedurally generated? (2)

 Levels and terrains


Why would we want to use AI to generate content for games? (5)

 Remove need of human designer or artist that create the content, hence faster and cheaper game production
 Augment human creators creativity
 Enable generation of completely new types of games
 Create player adaptive games
 Understand design and creativity


Describe the procedural content generation (PCG) taxonomy (6)

 Type – Necessary vs optional
 Determinism – Stochastic vs deterministic
 Controllability – Controllable vs non-controllable
 Iterativity – Constructive vs generate and test
 Autonomy – Autonomous vs mixed-initiative
 Adaptivity – Experience-agnostic vs experience-drive


What are the methods used for procedural content generation (PCG) in games (6)

 Search-based methods
 Solver-based methods
 Grammar-based methods
 Cellular automata
 Noise and fractals
 Machine learning


What are the core components of the search-based approach to solve a content generation problem? (3x2)

 A search algorithm – the engine of search-based method. Can use simple evolutionary algorithm. Sophisticated algorithm can take constraints into account or that are specialized for a particular content representation.
 A content representation – Representation of the artifacts to be generated e.g, levels, quests or winged kittens. Could be an array of numbers to a graph to a string.
 Evaluation functions – An evaluation function is a function from an artifact to a number indicating the quality of the artifact. The output of evaluation function could indicate e.g., the playability of a level, the intricacy of a quest or the aesthetic appeal of a winged kitten.


How can we represent the content for a level in Super Mario Bros in search-based approach? (5)

 Directly as a level map, where each variable in the genotype corresponds to one “block” in the phenotype.
 More indirectly, as a list of the positions and properties of different game entities such as enemies, platforms, gaps and hills.
 Even more indirectly, as a repository of different reusable patterns (such as collections of coins or hills), and a list of how they are distributed (with various transforms such as rotation and scaling) across the level map
 Very indirectly, as a list of desirable properties such as the number of gaps, enemies or coins, the width of gaps
 Most indirectly as a random number seed


What are the three classes of evaluation functions? (9)

 Direct evaluation function –
     Map the generated phenotype representation of the content directly to a content
    quality value.
     No simulation of game play required.
     Hand coded or learned from data
     Fast to compute and easy to implement
     Hard to devise a direct evaluation function for some aspects of game content
 Simulation-based evaluation function –
     Use AI agent to play through the generated content to estimate its quality
     Calculate statistics of agent behavior and playing style and use these statistics to
    score game content.
     The type of evaluation task determines the area of proficiency of the AI agent,
    e.g., to test the existent of a path from start to the end in a maze, AI agent should
    be designed to excel in reaching the end of the game
 Interactive evaluation function –
     Evaluate content based on interaction with a human.
     Example: evaluate quality of personalized evolved weapons based on how often
    and how long the player chooses to use this weapons


How does solver-based methods works in procedural content generation? (4)

 It uses constraint solvers such as those used in logic programming to search for content artifacts that satisfy a number of constraints
 Constraint solver allows the designer to specify a number of constraint in a specific language (mathematically or logic language)
 Commonly used method is to reduce the problem to a SAT (satisfiability) problem and using SAT solver to find solutions.
 These SAT solvers do not search throughout the solution space but only search the space of spatial solutions. (It iteratively pruning the search space)


What is mean constructive method? (1)

 PCG that create contents without an evaluation functions or re-generation


How can we interpret a generated string from gramma expansion to a graphic? (5)

 Turtle graphics
 Think of a turtle moving across a plane holding a pencil and drawing a line that traces its
path.
 Command the turtle to move forward, or turn left or right
 Example: given the L-system alphabet {F, +, -, [, ]}
We can define the interpretation as:
F: move forward a certain distance (e.g., 10 pixels)
+: turn left 30 degrees
-: turn right 30 degrees
[: push the current position and orientation onto the stack ]: pop the position and orientation off the stack


What cellular automata is commonly used for? (3)

 Modeling environmental systems like heat and fire, rain and fluid flow, pressure and explosions and in in combination with influence maps for agent decision making
 Thermal and hydraulic erosion in procedural terrain generation
 Generate cave-like dungeons


How does a 2 dimension cellular automata work? (2)

 Initialize a set of cells on a grid by assigning a state for each of one of them
 On each time step t, create a new generation of cell according to a rule or a mathematical
function which specifies the new state of each cell given the current state of the cell and the states of the cells in its neighborhood at time t – 1, e.g, turn a cell ON when at least 5 of its neighbors are ON, otherwise turn it OFF.


What are the two most common neighborhood types for a two-dimensional cellular automata? (4)

 Moore
     Square consisting of the cells surrounding a cell including those surrounding it
diagonally, e.g., the eight cells surrounding a cell
 Von Neumann
     Cross of cells which are centered on the cell, e,g., the four cells surrounding the cell, above, below, left, and right.


What noise and fractals is commonly used for? (1)

 Generate heightmaps and textures (fractal) such as intensity map


How does midpoint displacement algorithm works? (4)

 Start with a horizontal line
 Find the midpoint of that line and move the line up or down by a random amount
 Repeat the steps for the resulting lines for as many steps needed to reach sufficient
resolution
 For each iteration, we lower the range of random number generator somewhat


How Diamond-Square algorithm works? (4)

 Create a 2D matrix with width and height 2n + 1
 Initialize all cell values to 0, except the four corner values which are set to random values
in some chosen range (e.g, [-1. 1]). The perform the following steps:
     Diamond step: Find the mindpoint of the four corners, ie., the most central cell in
    the matrix and set the value of that cell to the average value of the corners and
    add a random value to the middle cell
     Square step: Find the four cells in between the corners and set each those to the
average value of the two corners surrounding it, add a random value to each of
these cells
 Call this method recursively for each of the four subsquares of the matrix until you reach
the resolution limit of the matrix (3 * 3 sub-squares)
 Every time we call this method, reduce the range of the random values somewhat.


Why machine learning works well in generating music and images but not game content? (4)

1. Most game content has strict structural constraints to ensure playability.
 These constraints differ from the structural constraints of text or music because
of the need to play games in order to experience them.
 E.g., A level that structurally prevents players from finishing it is not a good level
even if it is visually attractive
2. For many types of content, there isn’t enough existing content to train on


How can we train n-gram model and use it to generate a level in Mario? (5)

 Diving the levels into vertical “slices” since most slices recur many times throughout the level
 Convert these “slices” into string
 Use this string Build conditional probability tables and build a conditional probability
tables
 Sample string from these tables when generation is required
 Convert the string back to level “slices”


By extending a representation called functional scaffolding for musical composition (FSMC), how did Hoover use it with a neural network to generate a super Mario bro level? (8)

 FSMC representation posits
    1. Music can be represented as a function of time
    2. Musical voices in a given piece are functionally related
 Each level is broken down into a sequence of tile-width columns
 The height of each column extends the height of the screen
 FSMC represents a unit of time as the width of each column
 At each unit of time, the system queries the ANN to decide a height to place a tile
 FSMC inputs height and number of times a tile-type is repeated at that height
 For a given tile-type, this information then fed to a neural network that is trained on two- thirds of the existing human-authored levels to predict the value of a tile-type at each column
 The idea is that neural network will learn hidden relationships between the tile-types in the human-authored levels


What are the four roles of procedural content generation in games? (4)

 Mixed-initiative
 Autonomous
 Experience-driven
 Experience-agnostic


When can we safely claim that the procedural content generation is autonomous instead of mixed-initiative? (1)

 PCG process is autonomous when the initiative of the designer is limited to algorithmic parameterizations before the generation starts


What are the key components of experience-driven procedural content generation (EDPCG)? Give one example game that applies EDPCG (5)

 Player experience modeling – player experience is modeled as a function of game content and player
 Content quality – the quality of the generated content is assessed and linked to modeled experience
 Content representation – content is represented accordingly to maximize search efficacy and robustness
 Content generator – the generator searches through the generative space for content that optimizes the experience for the player according to the acquired model
 Example game: Left for dead (2008) – adjust pacing of game based on player’s emotional intensity. PCG is used to adjust game difficulty to keep player engaged


When could be generated by PCG? (6)

 Levels and maps
 Visuals
 Audio
 Narrative
 Rules and mechanics
 Games


How can we evaluate a content generator? (3x3)

 Visualization
     Expressive range
     Heatmaps
     Data compression
 AI
     Use AI to test the game across a number of metrics and return values about its quality
     Metrics and be a form of classes, for instance, test checks performed on completing an area of a level, scalar values, e.g., a level’s balance or ordinal values – e.g., the rank of the level in terms of asymmetry
     Similar to design utility function
     Use perocedural personas – data driven inferred models of dissimilar play styles
    that potentially imitate the different styles of human play which provides a more human-realistic approach to AI-based testing of a generator.
 Human players
     Playtesting - Measure subjective aspects such as aesthetics and playing
    experience
     Explicitly ask player about it or crowdsourcing to provide sufficient data to
    machine learn content evaluation functions. Data obtained can be in any format
    including classes, scores or ranks
     Can be complemented by annotations from game designer/experts so that game is labelled from first-person (player) and third-person (designer) annotations.


What is player modeling? (1)

 Player modeling is the study of computational means for the modeling of a player’s experience or behavior which is based on theoretical frameworks about player and/or data derived from the interaction of the player with a game
 Involve cognitive, affective, personality and demographic aspects of the player


What is opponent modeling? (1)

 Predict adversarial player when playing to win in an imperfect information game like Poker or Starcraft


What is player profiling? (2)

 Categorization of players based on static information that does not alter during gameplay such as personality, cultural background, gender and age
 Useful to construction of reliable player models


What is the difference between player behavior and player experience? (1)

 Player behavior – what a player does in game
 Player experience – how a player feels during play


Why do we want to model players? (2)

 Understand something about their player’s experience during play 
 Understand player’s behaviors in the game


What are types of metrics that we can extract gameplay data? (2)

 Player metrics
 Game metrics


What can we do after modeling the player behavior?

 Personalization of content
 Adjustment of NPCs
 Redesign parts of game
 Improved game testing and game design
 Better monetization and marketing strategies
  

What are the four main player modeling subtasks that are particularly relevant for game AI?

 Imitation - Develop believable human-like non-player characters
 Prediction – Provide s such as “when will this player stop playing?”
 Clustering - classification of player behaviors
 Association mining – frequent patterns or sequences of actions are important for
determining player behavior in a game


What approaches can be used to build a player model? (3)

 Model-based approaches – built using theoretical frameworks
 Model-free approaches – built using actual human player data
 Hybrid approaches – between model-based and model-free approach


What are theoretical frameworks that we can use to build models of player experience? (3)

 Psychology and affective sciences
 Neuroscience
 Game studies and game research


Describe the representations of emotional dimensions of arousal and valance? (2)

 Valence refers to how pleasurable (positive) or unpleasurable (negative) the emotion is
 Arousal refers to how intense (active) or lethargic (inactive) that emotion is


Flow is psychological construct that is relevant to player experience and has been adapted in game design. Explain the concept of flow by Csikszentmihalyi (4)

 Flow model player experience in a top-down fashion
 When in a state of flow during an activity, we tend to concentrate on the present moment
and lose our ability of reflective self-consciousness
 When in flow, we feel a sense of personal control over situation or activity
 We experience the activity as intrinsically rewarding


What are the three Malone’s core design dimensions that contribute to fun games? (3x2)

 Challenge -> uncertainty of achieving a goal
 Curiosity -> player feeling of uncertainty with respect to what will happen next
 Fanstasy -> Ability of the game to show situations that are not actually present


What are the four archetypes of players according to Bartle classification? (8)

 Killersplayers that focus on winning and are engaged by rank/leaderboards
 Achieversplayers that focus on achieving goals quickly and are engaged by
achievements
 Socializersplayers that focus on developing a network
 Explorersplayers who focus on exploration of the unknown


What is the theory of fun by Koster? (2)

 Koster’s theory relates the concept fun with learning in games – the more you learn the more you tend to play a game.
 You stop playing that is too easy or too hard


What are the four Lazzaro’s fun factor? (4x2)

 Hard fun – playing to win and see how good I am at it
 Easy fun – playing to explore new worlds and game spaces
 Serious fun – playing to feel better about myself or get better at something that matters
to me
 People fun – playing as an excuse to invite friends over


How model-free approaches model player? (6)

 Data-driven construction of an unknown mapping (model) between a player input and a player state
 Model inputManifestation of player affect (heart rate, facial expression) or behavioral pattern
 Model outputRepresentation of player state such as experience or current emotional, cognitive or behavioral state


What can we use as input for the player model? (5)

 Gameplay data
 Objective data
 Game context
 Profile
 Linked data


What are gameplay input? List some examples of gameplay input that can be used for the model’s input (6)

 Any element derived from direct interaction between the player and the game
 Also defined as player metrics
 Detailed attributes of player’s behavior derived from responses to game elements such as
NPCs, game levels, user menus or embodied conversational agens
 Example: Spatial locations of player viewed as heatmaps
 Example: Weapons selected in shooter game
 Example: Performance and time spent on a level


What is the major limitation of using gameplay input for the model input? (2)

 Actual player experience is only indirectly observed
 E.g., a player who has little interaction with a game might be thoughtful and captivated or just bored and busy doing something else


What are objective input? List some examples of objective input for the model’s input? (3)

 Objective approach incorporates access to multiple modalities of player input obtained through electrocardiography (ECG), photoplethysmography, galvanic skin response (GSR), respiration, electroencephalography (EEG) and electromyography (EMG)
 May also track bodily expressions (motion tracking)
 Example: Facial expression, eye movement, body posture, heart beat rate, skin temperature


Why game context input is an important input for the player model? (4)

 Game context refers to the momentanous state of the game during play and excludes any gameplay elements
 Provides context for the emotion expressed by player that time
 For example, it is very hard to tell what the heightened galvanic skin response “means”
without knowing what is happening in the game at the moment
 Or a particular facial expression of the player could be associated with either an
achievement in the game or a challenging moment


Why player profile is useful for the model’s input? (3)

 Player profile includes all static information about the player including general demographics of the player such as gender, age, and culture background
 Complements captured in-game behavior with general attributes about the player
 May lead to more precise predictive models about players


What can we represent as output for the player model? (3)

 Experience – through manual annotation of player experience
 Behavior – based on in-game-actions
 No output – unsupervised learning


What are the issues faced when manually annotating player experience? (7)

 Free response or forced response
 Who annotates
 How is player experience represented
 How often to annotate
 When to annotate
 Which annotation type
 What is the value of player expectation


What is mean by player free response and forced response? (2x2)

 Free response retrieved via a think-aloud protocol (express one’s thought as they occurred) contains richer information about player state but is often unstructured, even chaotic and hard to analyze appropriately
 Forced response force player to self-report their experiences using directed questions or tasks constrains them to specific questionnaire items


What are the two main categories of annotators? (2x2)

 First-person annotationplayer self-reports their experience via questionnaire, closer to ground truth, have memory-experience gap
 Third-person annotationan expert / external observer provides the player state, less bias, accuracy depends on expert’s experience


What can we represent player experience in game? (2x2)

 Discreterepresent player experience with labels such as “excited”, “annoyed”
 Continuous Russell’s two-dimensional (arousal-valance) circumplex model of affect that can capture immersion and experience intensity over time


How often we annotate player experience in game? (2x2)

 Time-continuoususe wheels and knobs to annotate experience throughout the game, require higher cognitive load and yield unreliable data
 Time-discreteProvides data at particular intervals when annotator feels there is a change in the player’s state indicated relatively rather than absolutely


When we annotate player experience in game? (3x2)

 Pre-experienceannotators set baseline of player’s state prior playing a game, this could be influenced by mood of the day, social network activity, caffeine consumption
 During-experiencemay involve the player in a first-person think-aloud setup or a third- person annotation design
 Post-experienceplayer self-reports their playing experience


What are the types of player experience annotation? (3)

 Rating-based
 Class-based
 Rank-based

How can we assign value to player experience? (2x2)

 Absolute – more information, but not very accurate, something human is not good at, we cannot maintain constant value
 Relative – less information, more human friendly since we are good at pairwise comparison


How can we build player model when the provided datasets do not have player behaviors or experience target output? (2)

 Use unsupervised learning techniques such as clustering or associate mining.
 Use reinforcement learning with a designed reward function that characterizes the
behavioral or experiential patterns of play to discover about player behavior or player experience based on in-game play traces or other state-action representations


What are the three supervised learning techniques that can be used to model a player? (3)

 Regression
 Classification
 Preference learning


What type of player behavior modeling task is suitable to use regression? (2)

 Imitation
 Prediction


Why regression should not be used to learn the exact numeric ratings of experience? (5)

 Regression methods assume the target values follow an interval (numerical) scale
 Ratings is an ordinal scale
 Should not convert ratings to numerical values due to subjectivity inherent to reports
which imposes a non-uniform and varying distance among questionnaire items
 Even though might achieve high prediction accuracies – do not necessarily capture the
true reported playing experience
 Overall, regression is not suitable to model player experience


What type of player behavior modeling task is suitable to use classification? (2)

 Imitation
 Prediction


How can we use classification to model player behavior? (3)

 Discrete annotations of experience are selected from a list of possibilities and provided as target outputs
 Treat ratings of experience as classes and transform the ordinal scale into a nominal scale of separate classes
 For example: ratings that lie between -1 and 1 are transformed into low, neutral and high arousal classes


What algorithms can we use for preference learning? (2)

 Linear statistical models such as linear discriminant analysis and large margins
 Non-linear approaches such as Gaussian process, deep and shallow artificial neural networks and support vector machines


How can we model a player using reinforcement learning (RL)? (7)

 Using a reward signal that can adjust a set of parameters that characterize the player
 Reward signal can be based on player in-game behavior or on player annotation throughout the level or objective data
 To model behavior - Use game play data
 To model experience – use objective measure or subjective report
 Build model offline or at runtime
 Hybrid offline and runtime by building offline first then polish runtime
 Offline RL modeling adds procedural personas while runtime RL offers dynamicity (increase personalization)


How can we model a player using unsupervised learning? (2,4-2)

 Clustering
     Find clusters in dataset so that data within a cluster is similar to each other and
    dissimilar to data in other cluster sets
     Relevant data include player behavior, navigation patterns, assets bought, items
    used, game genres played and so on
     Group players into archetypical playing patterns to see how people play a
    particular game and as part of a user-oriented testing process
     To see whether people play the game as intended
 Frequent pattern mining
     Frequent itemset mining and frequent sequence mining to find inherent and
    hidden regularities in the data
     Frequent pattern mining can use to discover what game content is often
    purchased together – e.g, players that buy X tend to buy Y too or what subsequent actions after dying in a level – e.g., players that die often in tutorial pick up more health packs in level 1